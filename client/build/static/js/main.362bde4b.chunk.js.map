{"version":3,"sources":["serviceWorker.js","firebase/firebase.js","redux/actionTypes.js","redux/persistActions.js","components/generalerror.js","components/navigation.js","components/songs.js","components/history.js","components/applayout.js","components/song.js","App.js","redux/persistReducer.js","redux/store.js","index.js"],"names":["Boolean","window","location","hostname","match","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","rtdb","database","settings","cacheSizeBytes","CACHE_SIZE_UNLIMITED","enablePersistence","actionTypes","updateAuthors","updateSongs","addSong","updateSearch","Object","freeze","getPersistActions","data","type","payload","authors","songsList","song","search","GeneralError","react_default","a","createElement","className","Navigation","react_router_dom","to","style","textDecoration","color","activeClassName","exact","id","react_fontawesome_index_es","icon","faBars","faHistory","Songs","this","setState","searchBar","props","searchString","slice","trim","toLowerCase","replace","filteredSongs","toConsumableArray","filter","length","author","includes","value","onChange","placeholder","map","l","i","key","pathname","state","authorName","songName","React","Component","connect","lyrx","dispatch","e","nativeEvent","target","History","songs","AppLayout","_ref","children","navigation","Song","text","_this2","history","filtered","obj","collection","where","get","then","querySnapshot","docs","App","_this","doc","allAuthors","ref","once","val","updateSongsList","applayout","react_router","path","component","defaultState","persistReducer","arguments","undefined","action","objectSpread","Set","concat","item","JSON","stringify","parse","configureStore","initialState","reducer","combineReducers","auth","mock","storage","debug","blacklist","rootReducer","store","createStore","whitelist","persistor","persistStore","ReactDOM","render","es","integration_react","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.362bde4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyBoTxoYqKOpLd4CBzxau1G8tHvQOlF9kGY\",\r\n  authDomain: \"lyrx-app.firebaseapp.com\",\r\n  databaseURL: \"https://lyrx-app.firebaseio.com\",\r\n  projectId: \"lyrx-app\",\r\n  storageBucket: \"lyrx-app.appspot.com\",\r\n  messagingSenderId: \"104087623318\",\r\n  appId: \"1:104087623318:web:e69d843653905449\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst rtdb = firebaseApp.database();\r\n\r\ndb.settings({\r\n  cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED\r\n});\r\n\r\ndb.enablePersistence();\r\n\r\nexport { db, rtdb };\r\n","export const actionTypes = {\r\n  updateAuthors: \"update-authors\",\r\n  updateSongs: \"update-songs\",\r\n  addSong: \"add-song\",\r\n  updateSearch: \"update-search\"\r\n};\r\nObject.freeze(actionTypes);\r\n","import { actionTypes } from \"./actionTypes\";\r\n\r\nexport const getPersistActions = {\r\n  updateAuthors: data => ({\r\n    type: actionTypes.updateAuthors,\r\n    payload: { authors: data }\r\n  }),\r\n  updateSongs: data => ({\r\n    type: actionTypes.updateSongs,\r\n    payload: { songsList: data }\r\n  }),\r\n  addSong: data => ({\r\n    type: actionTypes.addSong,\r\n    payload: { song: data }\r\n  }),\r\n  updateSearch: data => ({\r\n    type: actionTypes.updateSearch,\r\n    payload: { search: data }\r\n  })\r\n};\r\n","import React from \"react\";\r\n\r\nconst GeneralError = () => (\r\n  <div className=\"container\">\r\n    <h1>Error of some kind!!!</h1>\r\n  </div>\r\n);\r\n\r\nexport default GeneralError;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { faHistory, faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nconst Navigation = () => (\r\n  <nav className=\"stickyNav\">\r\n    <NavLink\r\n      to=\"/\"\r\n      style={{ textDecoration: \"none\", color: \"white\" }}\r\n      activeClassName=\"is-active\"\r\n      className=\"navButtons\"\r\n      exact\r\n    >\r\n      <button id=\"songs\">\r\n        <FontAwesomeIcon icon={faBars} />\r\n        <br />\r\n        Songs\r\n      </button>\r\n    </NavLink>\r\n\r\n    <NavLink\r\n      to=\"/history\"\r\n      style={{ textDecoration: \"none\", color: \"white\" }}\r\n      activeClassName=\"is-active\"\r\n      className=\"navButtons\"\r\n      exact\r\n    >\r\n      <button id=\"history\">\r\n        <FontAwesomeIcon icon={faHistory} />\r\n        <br />\r\n        History\r\n      </button>\r\n    </NavLink>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPersistActions } from \"../redux/persistActions\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Songs extends React.Component {\r\n  componentDidMount() {\r\n    this.setState({\r\n      searchBar: this.props.search\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let searchString = this.props.search.slice(0, -1);\r\n    searchString = searchString\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(\"đ\", \"d\")\r\n      .replace(\"ž\", \"z\")\r\n      .replace(\"ć\", \"c\")\r\n      .replace(\"č\", \"c\")\r\n      .replace(\"š\", \"s\");\r\n    let filteredSongs = [...this.props.songsList].filter(function(song) {\r\n      if (searchString.length) {\r\n        return (song.song + \" \" + song.author + \" \" + song.song)\r\n          .toLowerCase()\r\n          .includes(searchString);\r\n      } else return (song.song + \" \" + song.author).toLowerCase().includes(\"a\");\r\n    });\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"input-wrapper\">\r\n          <input\r\n            value={this.props.search}\r\n            onChange={this.props.updateSearch}\r\n            placeholder=\"Search songs...\"\r\n          />\r\n        </div>\r\n        <ul className=\"songsList\">\r\n          {filteredSongs.slice(0, 50).map((l, i) => {\r\n            return (\r\n              <li key={i} className=\"songListItem\">\r\n                <NavLink\r\n                  style={{ textDecoration: \"none\", color: \"white\" }}\r\n                  to={{\r\n                    pathname: \"/song\",\r\n                    state: {\r\n                      authorName: l.author,\r\n                      songName: l.song\r\n                    }\r\n                  }}\r\n                >\r\n                  <div className=\"songName\">{l.song}</div>\r\n                  <div className=\"authorName\">{l.author}</div>\r\n                </NavLink>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    songsList: state.lyrx.songsList,\r\n    search: state.lyrx.search\r\n  }),\r\n  dispatch => ({\r\n    updateSearch: e => {\r\n      dispatch(getPersistActions.updateSearch(e.nativeEvent.target.value));\r\n    }\r\n  })\r\n)(Songs);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass History extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"history-container\">\r\n        <ul className=\"histroy-songsList\">\r\n          {this.props.songs.map((l, i) => (\r\n            <li key={i} className=\"songListItem\">\r\n              <NavLink\r\n                style={{ textDecoration: \"none\", color: \"white\" }}\r\n                to={{\r\n                  pathname: \"/song\",\r\n                  state: {\r\n                    authorName: l.author,\r\n                    songName: l.song\r\n                  }\r\n                }}\r\n              >\r\n                <div className=\"songName\">{l.song}</div>\r\n                <div className=\"authorName\">{l.author}</div>\r\n              </NavLink>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(state => ({\r\n  songs: state.lyrx.songs\r\n}))(History);\r\n","import React from \"react\";\r\nimport { Navigation } from \"./\";\r\n\r\nconst AppLayout = ({ children }) => (\r\n  <div className=\"Site\">\r\n    <header>\r\n      <Navigation />\r\n    </header>\r\n    <main className=\"Site-content\">{children}</main>\r\n    <footer>LyrX &copy; </footer>\r\n  </div>\r\n);\r\n\r\nexport default AppLayout;\r\n","import React from \"react\";\r\nimport { db } from \"../firebase/firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPersistActions } from \"../redux/persistActions\";\r\n\r\nclass Song extends React.Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n  componentDidMount() {\r\n    let author = this.props.history.location.state.authorName;\r\n    let song = this.props.history.location.state.songName;\r\n    let filtered = this.props.songs.filter(\r\n      obj => obj.song === song && obj.author === author\r\n    );\r\n    if (filtered.length) {\r\n      this.setState({ text: filtered[0].text });\r\n    } else {\r\n      const group = db\r\n        .collection(\"songs\")\r\n        .where(\"author\", \"==\", author)\r\n        .where(\"song\", \"==\", song);\r\n      group.get().then(querySnapshot => {\r\n        if (querySnapshot.docs.length) {\r\n          this.setState({ text: querySnapshot.docs[0].data().text });\r\n          this.props.addSong({\r\n            author,\r\n            song,\r\n            text: querySnapshot.docs[0].data().text\r\n          });\r\n        } else this.setState({ text: \"Text offline nije dostupan...\" });\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"song-container\">\r\n        <h2 className=\"song-title\">\r\n          {this.props.history.location.state.songName}\r\n        </h2>\r\n        <h3 className=\"song-author\">\r\n          {this.props.history.location.state.authorName}\r\n        </h3>\r\n        <div className = \"songText\">{this.state.text}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    songs: state.lyrx.songs\r\n  }),\r\n  dispatch => ({\r\n    addSong: song => dispatch(getPersistActions.addSong(song))\r\n  })\r\n)(Song);\r\n","import React from \"react\";\r\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { db, rtdb } from \"./firebase/firebase\";\r\nimport { getPersistActions } from \"./redux/persistActions\";\r\nimport {\r\n  AppLayout,\r\n  GeneralError,\r\n  Songs,\r\n  History,\r\n  Song\r\n} from \"./components/\";\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    const group = db.collection(\"authors\").doc(\"--allAuthors--\");\r\n    group.get().then(querySnapshot => {\r\n      const data = querySnapshot.data();\r\n      this.props.updateAuthors(data.allAuthors);\r\n    });\r\n\r\n    rtdb\r\n      .ref(\"/data\")\r\n      .once(\"value\")\r\n      .then(querySnapshot => {\r\n        const data = querySnapshot.val();\r\n        this.props.updateSongsList(data);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <AppLayout>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Songs} />\r\n            <Route exact path=\"/history\" component={History} />\r\n            <Route exact path=\"/song\" component={Song} />\r\n            <Route component={GeneralError} />\r\n          </Switch>\r\n        </AppLayout>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  dispatch => ({\r\n    updateAuthors: authors =>\r\n      dispatch(getPersistActions.updateAuthors(authors)),\r\n    updateSongsList: songsList =>\r\n      dispatch(getPersistActions.updateSongs(songsList)),\r\n    addSong: song => dispatch(getPersistActions.addSong(song))\r\n  })\r\n)(App);\r\n","import { actionTypes } from \"./actionTypes\";\r\n\r\nconst defaultState = {\r\n  songs: [],\r\n  authors: [],\r\n  songsList: [],\r\n  search: \"\"\r\n};\r\n\r\nexport default function(state = defaultState, action = {}) {\r\n  switch (action.type) {\r\n    case actionTypes.addSong:\r\n      return {\r\n        ...state,\r\n        songs: [\r\n          ...new Set(\r\n            [action.payload.song, ...state.songs].map(item =>\r\n              JSON.stringify(item)\r\n            )\r\n          )\r\n        ].map(item => JSON.parse(item))\r\n      };\r\n    case actionTypes.updateAuthors:\r\n      return {\r\n        ...state,\r\n        authors: action.payload.authors\r\n      };\r\n    case actionTypes.updateSongs:\r\n      return {\r\n        ...state,\r\n        songsList: action.payload.songsList\r\n      };\r\n    case actionTypes.updateSearch:\r\n      return {\r\n        ...state,\r\n        search: action.payload.search\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport rootReducer from \"./persistReducer\";\r\n\r\nfunction configureStore(initialState = {}) {\r\n  const reducer = combineReducers({\r\n    auth: () => ({ mock: true }),\r\n    lyrx: persistReducer(\r\n      {\r\n        key: \"lyrx\",\r\n        storage,\r\n        debug: true,\r\n        blacklist: [\"foo\"]\r\n      },\r\n      rootReducer\r\n    )\r\n  });\r\n\r\n  const store = createStore(\r\n    persistReducer(\r\n      {\r\n        key: \"root\",\r\n        debug: true,\r\n        storage,\r\n        whitelist: [\"auth\"]\r\n      },\r\n      reducer\r\n    ),\r\n    initialState\r\n  );\r\n\r\n  // console.log(\"initialState\", store.getState());\r\n\r\n  const persistor = persistStore(store, null, () => {\r\n    // console.log(\"restoredState\", store.getState());\r\n  });\r\n\r\n  return { store, persistor };\r\n}\r\n\r\nexport default configureStore;\r\n","//MUST HAVES\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n//STYLES\r\nimport \"./index.css\";\r\n//COMPONENTS\r\nimport App from \"./App\";\r\n//Redux-persist\r\nimport configureStore from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\r\nconst { store, persistor } = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}